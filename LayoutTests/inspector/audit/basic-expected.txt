Testing the basic functionality of audits.


== Running test suite: Audit.Basic
-- Running test case: Audit.Basic.Boolean.True
Testing value `true`...
PASS: Result should be "pass".

-- Running test case: Audit.Basic.Boolean.False
Testing value `false`...
PASS: Result should be "fail".

-- Running test case: Audit.Basic.String.Pass
Testing value `"pass"`...
PASS: Result should be "pass".

-- Running test case: Audit.Basic.String.Warn
Testing value `"warn"`...
PASS: Result should be "warn".

-- Running test case: Audit.Basic.String.Fail
Testing value `"fail"`...
PASS: Result should be "fail".

-- Running test case: Audit.Basic.String.Error
Testing value `"error"`...
PASS: Result should be "error".

-- Running test case: Audit.Basic.String.Unsupported
Testing value `"unsupported"`...
PASS: Result should be "unsupported".

-- Running test case: Audit.Basic.Object.Pass
Testing value `{"level":"pass"}`...
PASS: Result should be "pass".

-- Running test case: Audit.Basic.Object.Warn
Testing value `{"level":"warn"}`...
PASS: Result should be "warn".

-- Running test case: Audit.Basic.Object.Fail
Testing value `{"level":"fail"}`...
PASS: Result should be "fail".

-- Running test case: Audit.Basic.Object.Error
Testing value `{"level":"error"}`...
PASS: Result should be "error".

-- Running test case: Audit.Basic.Object.Unsupported
Testing value `{"level":"unsupported"}`...
PASS: Result should be "unsupported".

-- Running test case: Audit.Basic.Promise.Boolean.True
Testing value `new Promise((resolve, reject) => resolve(true))`...
PASS: Result should be "pass".

-- Running test case: Audit.Basic.Promise.String.Pass
Testing value `new Promise((resolve, reject) => resolve("pass"))`...
PASS: Result should be "pass".

-- Running test case: Audit.Basic.Promise.Object.Pass
Testing value `new Promise((resolve, reject) => resolve({level: "pass"}))`...
PASS: Result should be "pass".

-- Running test case: Audit.Basic.Async.Boolean.True
Testing value `true`...
PASS: Result should be "pass".

-- Running test case: Audit.Basic.Async.String.Pass
Testing value `"pass"`...
PASS: Result should be "pass".

-- Running test case: Audit.Basic.Async.Object.Pass
Testing value `{"level":"pass"}`...
PASS: Result should be "pass".

-- Running test case: Audit.Basic.Timeout.Pass
Testing value `new Promise((resolve, reject) => setTimeout(resolve, 0, "pass"))`...
PASS: Result should be "pass".

-- Running test case: Audit.Basic.Error.Undefined
Testing value `undefined`...
PASS: Result should be "error".
  errors:
   - Return value is not an object, string, or boolean

-- Running test case: Audit.Basic.Error.Null
Testing value `null`...
PASS: Result should be "error".
  errors:
   - Return value is not an object, string, or boolean

-- Running test case: Audit.Basic.Error.Number
Testing value `42`...
PASS: Result should be "error".
  errors:
   - Return value is not an object, string, or boolean

-- Running test case: Audit.Basic.Error.String
Testing value `"foo"`...
PASS: Result should be "error".
  errors:
   - Return string must be one of ["pass","warn","fail","error","unsupported"]

-- Running test case: Audit.Basic.Error.Object
Testing value `{}`...
PASS: Result should be "error".
  errors:
   - Missing result level

-- Running test case: Audit.Basic.Error.Variable
Testing value `INVALID`...
PASS: Result should be "error".
  errors:
   - ReferenceError: Can't find variable: INVALID

-- Running test case: Audit.Basic.Error.Promise.Resolved
Testing value `new Promise((resolve, reject) => setTimeout(resolve, 0))`...
PASS: Result should be "error".
  errors:
   - Return value is not an object, string, or boolean

-- Running test case: Audit.Basic.Error.Promise.Rejected
Testing value `new Promise((resolve, reject) => setTimeout(reject, 0, "rejected"))`...
PASS: Result should be "error".
  errors:
   - rejected

-- Running test case: Audit.Basic.Debugger
Testing `debugger`...
PASS: Should not pause on the debugger statement.
PASS: Result should be "pass".

